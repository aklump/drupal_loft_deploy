<?php
/**
 * @file
 * Main module file.
 *
 * @ingroup loft_deploy_ip Loft Deploy IP Access
 * @{
 */

define('LOFT_DEPLOY_IP_FILTER', 'exclude');

/**
 * Implements hook_loft_deploy_border_access().
 */
function loft_deploy_ip_loft_deploy_border_access_alter(&$access, $site_role, $cookie) {
  $access = variable_get('loft_deploy_ip_filter', LOFT_DEPLOY_IP_FILTER) === 'include' ? FALSE : TRUE;
  if (($ips = variable_get('loft_deploy_ip_ips', array()))) {
    foreach ($ips as $ip) {
      if (ip_address() == trim($ip)) {
        $access = variable_get('loft_deploy_ip_filter', LOFT_DEPLOY_IP_FILTER) === 'include' ? TRUE : FALSE;
        break;
      }
    }
  }
  $access = empty($cookie) && $access;
}

/**
 * Implements hook_menu().
 */
function loft_deploy_ip_menu() {
  $items = array();
  $items['admin/config/development/loft-deploy'] = array(
    'title' => 'Loft Deploy Access',
    'description' => 'Hide or show the border based on IP address(es).',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('loft_deploy_ip_admin_settings'),
    'access arguments' => array('loft_deploy_ip:administer'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'loft_deploy_ip.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function loft_deploy_ip_permission() {
  return array(
    'loft_deploy_ip:administer' => array(
      'title' => t('Administer Loft Deploy IP Access'),
      'description' => t('Perform administration tasks for Loft Deploy IP Access.'),
      'restrict access' => FALSE,
    ),
  );
}
