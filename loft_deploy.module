<?php
/**
 * @file
 * Base module file for loft_deploy
 *
 * @defgroup loft_deploy Loft Deploy
 * @{
 */

/**
 * @var LOFT_DEPLOY_SITE_ROLE
 */
define('LOFT_DEPLOY_SITE_ROLE', 'prod');
/**
 * @var LOFT_DEPLOY_SITE_ROLE_PROD
 */
define('LOFT_DEPLOY_SITE_ROLE_PROD', 'prod');
/**
 * @var LOFT_DEPLOY_SITE_ROLE_STAGING
 */
define('LOFT_DEPLOY_SITE_ROLE_STAGING', 'staging');
/**
 * @var LOFT_DEPLOY_SITE_ROLE_DEV
 */
define('LOFT_DEPLOY_SITE_ROLE_DEV', 'dev');

/**
 * Used to set the full path to the git binary.
 */
define('LOFT_DEPLOY_WHICH_GIT', '/usr/bin/git');

/**
 * Get the site role as defined in settings.local.php
 *
 * @param bool $reset
 *  (Optional.) Defaults to FALSE.
 *
 * @return string
 */
function loft_deploy_site_role($reset = FALSE) {
  static $site_role = NULL;
  if ($site_role === NULL) {
    // Site role based on settings.local.php  
    if (!($site_role = variable_get('loft_deploy_site_role', NULL))
      && file_exists('./' . conf_path() . '/settings.local.php')) {
      ob_start();
      include './' . conf_path() . '/settings.local.php';
      echo $site_role;
      $site_role = ob_get_contents();
      ob_end_clean();
    }
    // The default needs to be prod, so we don't deface a website unknowningly
    if (empty($site_role)) {
      $site_role = LOFT_DEPLOY_SITE_ROLE_PROD;
    }
  }

  return $site_role;
}

/**
 * Get the site role as defined in settings.local.php
 *
 * @param bool $reset
 *  (Optional) Defaults to FALSE.
 */
function loft_deploy_git_branch($reset = FALSE) {
  static $git_branch = NULL;
  if ($git_branch === NULL) {
    exec(variable_get('loft_deploy_which_git', LOFT_DEPLOY_WHICH_GIT) . ' status', $git);
    $git = implode(PHP_EOL, $git);
    if (preg_match('/On branch (.*)\s/i', $git, $found)
      && !($git_branch = $found[1])) {
      $git_branch = NULL;
    }
  }

  return $git_branch;
}

/**
 * Get the title string after replacements
 *
 * DO NOT CACHE THIS OR IT WON'T RESPOND TO GIT CHANGES!
 *
 * @param  bool $reset
 *
 * @return string
 */
function loft_deploy_get_title($reset = FALSE) {
  static $title = '';
  if (empty($title)) {
    // Set up the title template
    $title = variable_get('loft_deploy_site_title', 'Role: !site_role ~ Branch: !git_branch');
    drupal_alter('loft_deploy_title_pre', $title);

    // Now start replacing tokens
    $title = str_replace('!site_role', loft_deploy_site_role(), $title);
    
    if ($git_branch = loft_deploy_git_branch()) {
      $git_branch = strtolower($git_branch);
      $title = str_replace('!git_branch', $git_branch, $title);
      // Gitflow support
      if (strpos($git_branch, 'master') === 0
          || strpos($git_branch, 'hotfix') === 0) {
        $title = str_replace('!gitflow', 'master', $title);
      }
      if (strpos($git_branch, 'develop') === 0
          || strpos($git_branch, 'feature') === 0
          || strpos($git_branch, 'release') === 0) {
        $title = str_replace('!gitflow', 'develop', $title);
      }
    }
    drupal_alter('loft_deploy_title_post', $title);
  }

  return $title;
}

function loft_deploy_border_access() {
  $access = ($site_role = loft_deploy_site_role()) !== LOFT_DEPLOY_SITE_ROLE_PROD
      && empty($_COOKIE['loft_deploy']);
  drupal_alter('loft_deploy_border_access', $access, $site_role);

  return $access;
}

/**
 * Implements hook_preprocess_page().
 */
function loft_deploy_init() {
  if (loft_deploy_border_access()) {
    drupal_add_css(drupal_get_path('module', 'loft_deploy') . '/loft_deploy.css');
    drupal_add_js(drupal_get_path('module', 'loft_deploy') . '/loft_deploy.min.js');
  }
}

/**
 * Implements hook_footer().
 */
function loft_deploy_footer() {
  $output = '';
  if (loft_deploy_border_access()) {
    $site_role = loft_deploy_site_role();
    $output = '';

    $class = array();
    if ($css = trim(variable_get('loft_deploy_css_class', ''))) {
      $class = explode(' ', $css);
    }
    
    if ($git_branch = loft_deploy_git_branch()) {
      $git_branch = strtolower($git_branch);
      $class[] = 'git-' . $git_branch;
      
      // Gitflow support
      if (strpos($git_branch, 'master') === 0
          || strpos($git_branch, 'hotfix') === 0) {
        $class[] = 'gitflow-master';
      }
      elseif (strpos($git_branch, 'develop') === 0
          || strpos($git_branch, 'release') === 0) {
        $class[] = 'gitflow-develop';
      }
      elseif (strpos($git_branch, 'feature') === 0) {
        $class[] = 'gitflow-feature';
      }
    }
    $class = implode(' ', $class);

    $title = loft_deploy_get_title();
    $output .= <<<EOD
<div class="loft-deploy {$site_role} {$class}">
  <a class="loft-deploy-hide-trigger" href="#">
  {$title}
  </a>
  <!-- Borders. -->
  <div class="border n"></div>
  <div class="border e"></div>
  <div class="border s"></div>
  <div class="border w"></div>
  </div>
EOD;
  }

  return $output;
}

