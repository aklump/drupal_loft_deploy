<?php
/**
 * @file
 * Base module file for loft_deploy
 *
 * @defgroup loft_deploy Loft Deploy
 * @{
 */

/**
 * @var LOFT_DEPLOY_SITE_ROLE
 */
define('LOFT_DEPLOY_SITE_ROLE', 'prod');
/**
 * @var LOFT_DEPLOY_SITE_ROLE_PROD
 */
define('LOFT_DEPLOY_SITE_ROLE_PROD', 'prod');
/**
 * @var LOFT_DEPLOY_SITE_ROLE_STAGING
 */
define('LOFT_DEPLOY_SITE_ROLE_STAGING', 'staging');
/**
 * @var LOFT_DEPLOY_SITE_ROLE_DEV
 */
define('LOFT_DEPLOY_SITE_ROLE_DEV', 'dev');

/**
 * Get the site role as defined in settings.local.php
 */
function loft_deploy_site_role($reset = FALSE) {
  static $site_role = NULL;
  if ($reset || $site_role === NULL) {
    if (!empty($_SESSION['loft_deploy']['site_role'])) {
      $site_role = $_SESSION['loft_deploy']['site_role'];
    }
    elseif (!($site_role = variable_get('loft_deploy_site_role', NULL))) {
      if (file_exists(DRUPAL_ROOT . '/' . conf_path() . '/settings.local.php')
        && ($file = file_get_contents(DRUPAL_ROOT . '/' . conf_path() . '/settings.local.php'))
        && preg_match('/\$site_role *\= *[\'"]{1}([^\'"]*)[\'"]{1}/', $file, $found)
        && !($site_role = $found[1])) {
        // The default role is prod
        $site_role = LOFT_DEPLOY_SITE_ROLE_PROD;
      }
      $_SESSION['loft_deploy']['site_role'] = $site_role;
    }
  }
  return $site_role;
}

/**
 * Get the site role as defined in settings.local.php
 */
function loft_deploy_git_branch($reset = FALSE) {
  static $git_branch = NULL;
  if ($reset || $git_branch === NULL) {
    if (exec('git status', $git)
      && ($git = implode("\n", $git))
      && preg_match('/# On branch (.*)\s/', $git, $found)
      && !($git_branch = $found[1])) {
      $git_branch = NULL;
    }
  }
  return $git_branch;
}

/**
 * Implements hook_footer().
 */
function loft_deploy_footer() {
  $output = '';
  if (($site_role = loft_deploy_site_role()) !== LOFT_DEPLOY_SITE_ROLE_PROD) {
    drupal_add_css(drupal_get_path('module', 'loft_deploy') . '/loft_deploy.css');
    drupal_add_js(drupal_get_path('module', 'loft_deploy') . '/loft_deploy.js');

    $output = '';
    $class = array(variable_get('loft_deploy_css_class', ''));
    // Chose not to use tokens or t() for the theoretically fastest str replace
    $title = 'Role: !site_role ~ Branch: !git_branch';
    $title = str_replace('!site_role', $site_role, variable_get('loft_deploy_site_title', $title));

    if ($git_branch = loft_deploy_git_branch()) {
      $git_branch = strtolower($git_branch);
      $title = str_replace('!git_branch', $git_branch, $title);
      $class[] = 'git-' . $git_branch;
      // Gitflow support
      if (strpos($git_branch, 'master') === 0
          || strpos($git_branch, 'hotfix') === 0) {
        $class[] = 'gitflow-master';
        $title = str_replace('!gitflow', 'master', $title);
      }
      if (strpos($git_branch, 'develop') === 0
          || strpos($git_branch, 'feature') === 0
          || strpos($git_branch, 'release') === 0) {
        $class[] = 'gitflow-develop';
        $title = str_replace('!gitflow', 'develop', $title);
      }
    }


    $class = implode(' ', $class);
    $output .= <<<EOD
<div class="loft-deploy {$site_role} {$class}">
  <a class="hide" href="#">
  {$title}
  </a>
  <!-- Borders. -->
  <div class="border n"></div>
  <div class="border e"></div>
  <div class="border s"></div>
  <div class="border w"></div>
  </div>
EOD;
  }
  return $output;
}



/**
 * Implements hook_flush_caches().
 */
function loft_deploy_flush_caches() {
  //@todo This does not work in D5; figure out a hook
  unset($_SESSION['loft_deploy']);
}
