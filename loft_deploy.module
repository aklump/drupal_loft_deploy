<?php

/**
 * @file
 * Base module file for loft_deploy.
 *
 * @defgroup loft_deploy Loft Deploy
 * @{
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Render\Markup;
use Drupal\Core\Template\Attribute;
use Drupal\loft_deploy\LoftDeployManager;
use Drupal\Core\Site\Settings;

/**
 * Determine if the current user should see the border.
 *
 * @return bool
 *   True if the current user should see the border.
 *
 * // TODO Use the Access mechanism here.
 */
function loft_deploy_border_access() {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['access'] = &drupal_static(__FUNCTION__, NULL);
  }
  $access = &$drupal_static_fast['access'];
  if (is_null($access)) {
    $access = ($site_role = \Drupal::service('loft_deploy.manager')
        ->getSiteRole()) !== LoftDeployManager::ROLE_PROD
      && empty($_COOKIE['loft_deploy']);
    \Drupal::moduleHandler()
      ->alter('loft_deploy_border_access', $access, $site_role, $_COOKIE['loft_deploy']);
  }

  return $access && !Settings::get('loft_deploy.hide_border');
}

/**
 * Implements hook_preprocess_html().
 */
function loft_deploy_preprocess_html(&$vars) {
  if (loft_deploy_border_access()) {
    $ldm = \Drupal::service('loft_deploy.manager');
    $site_role = $ldm->getSiteRole();
    $output = '';

    $wrapper_attributes = [
      'class' => [
        'loft-deploy',
        $site_role,
      ],
    ];
    $custom_classes = Settings::get('loft_deploy.css_classes');
    $custom_classes = is_array($custom_classes) ? $custom_classes : explode(' ', $custom_classes);
    if (!empty($custom_classes)) {
      $wrapper_attributes['class'] = array_merge($wrapper_attributes['class'], $custom_classes);
    }

    // Add in css class for the IP.
    if (($ip = \Drupal::request()->getClientIp())) {
      if (in_array($ip, ['127.0.0.1', '::1'])) {
        $ip = 'localhost';
      }
      else {
        $ip = 'ip-' . str_replace('.', '-', $ip);
      }
      $wrapper_attributes['class'][] = $ip;
    }

    if ($git_branch = $ldm->getGitBranch()) {
      $git_branch = strtolower($git_branch);
      $wrapper_attributes['class'][] = 'git-' . $git_branch;

      // Gitflow support.
      if (strpos($git_branch, 'master') === 0
        || strpos($git_branch, 'hotfix') === 0
      ) {
        $wrapper_attributes['class'][] = 'gitflow-master';
      }
      elseif (strpos($git_branch, 'develop') === 0
        || strpos($git_branch, 'release') === 0
      ) {
        $wrapper_attributes['class'][] = 'gitflow-develop';
      }
      elseif (strpos($git_branch, 'feature') === 0) {
        $wrapper_attributes['class'][] = 'gitflow-feature';
      }
    }

    // Add in some styles based on color settings in $conf.
    $style = [];
    if (($border_color = Settings::get('loft_deploy.border_color'))) {
      $style[] = 'background-color: ' . Html::escape($border_color);
    }
    if (($title_color = Settings::get('loft_deploy.title_color'))) {
      $style[] = 'color: ' . Html::escape($title_color);
    }
    if ($style) {
      $style = implode('; ', $style);
      $wrapper_attributes['style'] = $style;
      $style = " style=\"$style\"";
    }
    else {
      $style = '';
    }
    array_walk($wrapper_attributes['class'], function ($item) {
      return 'loft_deploy--' . $item;
    });

    // Prepare vars for tpl.
    $wrapper_attributes = new Attribute($wrapper_attributes);
    $title = $ldm->getBorderTitle();

    $output .= <<<EOD
<div{$wrapper_attributes}>
  <a class="js-loft-deploy__hide" href="#">
  <span class="loft-deploy__title"{$style}>{$title}</span>
  </a>
  <!-- Borders. -->
  <div class="loft-deploy__border--n"{$style}></div>
  <div class="loft-deploy__border--e"{$style}></div>
  <div class="loft-deploy__border--s"{$style}></div>
  <div class="loft-deploy__border--w"{$style}></div>
  </div>
EOD;

    $vars['page_bottom']['loft_deploy'] = [
      '#markup' => Markup::create($output),
    ];
    $vars['page_bottom']['#attached']['library'][] = 'loft_deploy/visualizer';
    $vars['#attached']['drupalSettings']['loftDeploy']['metaTimeout'] = \Drupal::config('loft_deploy.settings')
      ->get('meta_timeout');
  }
}
